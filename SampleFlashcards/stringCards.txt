# String
# Created by gosia
Co to jest String? | String jest to klasa, która została zdefiniowana w pakiecie java.lang. Nie jest to prymitywny typ danych (prymitywy zaczynają się z małej litery). Jest niezmienny oraz (zazwyczaj) przechowywany w puli ciągów znaków (String pool).
Dlaczego String jest niezmienny? | Jest to spowodowane bezpieczeństwem (hasła, połączenia z bazami danych), synchronizacją (w programowaniu wielowątkowym) oraz zarządzaniem pamięcią (wystarczy jeden obiekt aby reprezentować dwie identyczne zmienne).
Co to jest String Pool? | String pool jest miejscem w pamięci, w którym przechowywana jest pula wszystkich Stringów. Lądują tam obiekty typu String zainicjowane przy użyciu cudzysłowu. Obiekty zainicjowane przy pomocy słówka new lądują w pamięci lokalnej.
Jak porównać dwa Stringi? | Jeżeli chcemy porównać zawartość obiektu (ciąg znaków) powinniśmy używać metody, w którą zaopatrzony jest ten obiekt – s1.equals(). Znak == sprawdza czy obiekty są identyczne, więc jeżeli inny obiekt ma inny hashcode, to otrzymamy false.
Co to StringBuffer i StringBuilder? | Podczas manipulacji Stringiem w czasie wykonywania programu za każdym razem gdy go zmieniamy tworzymy obiekt. Aby nie marnować pamięci na ciągłe tworzenie nowych ciągów znaków java udostępnia nam dwie klasy - StringBuffer oraz StringBuilder. 
Jaka jest różnica pomiędzy String, StringBuffer a StringBuilder? | String jest niezmienny, przechowywany w String Pool lub pamięci lokalnej. inicjowany przez "" lub new. StringBuffer i StringBuilder są zmienne, w pamięci lokalnej, inicjowane przez new. Buffer jest bezpieczny wielowątkowo, a Builder ma wyższą wydajność.
Jakie są metody inicjowania klasy String? | "" tworzy String w String pool, a new lokuje obiekt w pamięci lokalnej. Dzięki "" w przypadku powtórzenia danego ciągu znaków kompilator odwoła się do obiektów klasy String zawartych w puli – czego skutkiem będzie wyższa wydajność programu.
String w odróżnieniu od prymitywów (primitive classes) jest pochodną klasą (derived class). Czym różni się String od innych pochodnych klas? | 1 - String posiada swoją specjalną pulę. 2 - Możliwość deklarowania obiektów bez słówka „new”, przy pomocy tzw. „String literals” (dostępne też dla klas typu Wrapper np. Long, Integer czy Float). 3 -  operator „+” umożliwiający łatwe łączenie obiektów.
String, StringBuffer i StringBuilder – która z tych trzech klas typu final? | To pytanie jest pułapką – wszystkie z tych klas są zadeklarowane jako final. Warto pamiętać, że zadeklarowanie klasy jako final nie stanowi o jej zmienności. Słówko final stanowi o tym, że klasa nie może być dziedziczona przez inne klasy!
Czym jest „String Intern”? | „String Intern” jest to obiekt składowany w String pool. Użycie metody .intern() na ciągu obiektów String spowoduje, że będziemy mogli być pewni, iż wszystkie obiekty o tej samej zawartości mają jedno miejsce w pamięci w puli.
Czy w obiekcie klasy String można przechowywać dane wrażliwe? | Hasła i inne wrażliwe dane powinny być przechowywane w tablicy znaków – char[]. String jest niezmienny (immutable), więc nie można pozbyć się jego zawartości. Stringi są przechowywane w puli i mają dłuższą żywotność niż obiekty w pamięci lokalnej (heap).
Ile obiektów będzie stworzonych przez ten kod? String s1 = „abc”; String s2 = „abc”; | W tym przypadku tworzony jest jeden obiekt. Pierwszy obiekt s1 tworzony jest w pamięci lokalnej w puli obiektów typu String, natomiast drugi obiekt s2, poprzez referencję będzie odwoływał się do tej samej wartości.
Ile obiektów zostanie utworzonych przez ten kod? String s1 = „abc”; String s2 = new String(„abc”); | Tworzone są dwa obiekty. Pierwszy z nich ląduje w puli, natomiast drugi poprzez użycie słówka „new” tworzony jest w pamięci lokalnej.
